sm_MAN<-summary(MAN)
# Sample 1 and 2
SE<-sqrt((diag(W)/(n-g))*(1/n1 + 1/n2))
cbind(xbar1 - xbar2 - t_mult*SE, xbar1 - xbar2 + t_mult*SE)
m = p * choose(g,2)
alpha<-0.05
t_mult<-qt(alpha/(2*m),n-g,lower.tail=FALSE)
# Sample 1 and 2
SE<-sqrt((diag(W)/(n-g))*(1/n1 + 1/n2))
cbind(xbar1 - xbar2 - t_mult*SE, xbar1 - xbar2 + t_mult*SE)
# Sample 2 and 3
SE<-sqrt((diag(W)/(n-g))*(1/n2 + 1/n3))
cbind(xbar2 - xbar3 - t_mult*SE, xbar2 - xbar3 + t_mult*SE)
xbar1
xbar1 - xbar2
SE<-sqrt((diag(W)/(n-g))*(1/n1 + 1/n3))
SE
W
diag(W)
cbind(xbar1 - xbar3 - t_mult*SE, xbar1 - xbar3 + t_mult*SE)
Z <- cbind(c(1,1,1,1,1,1), c(10,5,7,19,11,8)); y <- c(15,9,3,25,7,13)
Z
beta_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%y
beta_hat
y_hat <- Z%*%beta_hat
beta_hat <- solve(t(Z)%*%Z)%*%t(Z)%*%y; beta_hat
y_hat <- Z%*%beta_hat; y_hat
e_hat <- y - y_hat; e_hat
t(e_hat)%*%e_hat
Z <- cbind(c(1,1,1,1,1), c(-2,-1,0,1,2))
y1 <- c(5,3,4,2,1); y2 <- c(-3,-1,-1,2,3)
# Least square estimate
beta_hat1 <- solve(t(Z)%*%Z)%*%t(Z)%*%y1; beta_hat1
beta_hat2 <- solve(t(Z)%*%Z)%*%t(Z)%*%y2; beta_hat2
beta_hat <- cbind(beta_hat1, beta_hat2)
beta_hat
y_hat <- Z%*%beta_hat; y_hat
y <- cbind(y1, y2)
e_hat <- y - y_hat; e_hat
y_hat <- Z%*%beta_hat; y_hat
e_hat <- y - y_hat; e_hat
t(y)%*%y
t(y_hat)%*%y_hat + t(e_hat)%*%e_hat
t(y)%*%y
t(y)%*%y
r <- 2; n <- 5; alpha<-0.05
f_mult <- qf(alpha,r+1,n-r-1,lower.tail=FALSE)
V <- [t(e_hat)%*%e_hat/(n-r-1)]%*%(solve(t(Z)%*%Z))
V <- t(e_hat)%*%e_hat/(n-r-1)%*%(solve(t(Z)%*%Z))
V <- (t(e_hat)%*%e_hat/(n-r-1))%*%(solve(t(Z)%*%Z))
V
SE <- sqrt(diag(V))
cbind(beta_hat1 - f_mult*SE, beta_hat1 + f_mult*SE)
beta_hat1
f_mult
f_mult <- sqrt((r+1)*qf(alpha,r+1,n-r-1,lower.tail=FALSE))
f_mult
V <- (t(e_hat)%*%e_hat/(n-r-1))%*%(solve(t(Z)%*%Z))
SE <- sqrt(diag(V))
cbind(beta_hat1 - f_mult*SE, beta_hat1 + f_mult*SE)
t(y)%*%y == t(y_hat)%*%y_hat + t(e_hat)%*%e_hat
t(y)%*%y
t(y_hat)%*%y_hat + t(e_hat)%*%e_hat
SE
f_mult
V
t(e_hat)%*%e_hat
V <- (t(e_hat)%*%e_hat/(n-r-1))%*%(solve(t(Z)%*%Z))
SE <- sqrt(diag(V))
cbind(beta_hat1 - f_mult*SE, beta_hat1 + f_mult*SE)
beta_hat1
r <- 2; n <- 5; alpha<-0.05; Z01 <- c(1, 0.5)
cbind(Z01%*%beta_hat1 - f_mult*SE, Z01%*%beta_hat1 + f_mult*SE)
r <- 1; n <- 5; alpha<-0.05; Z01 <- c(1, 0.5)
f_mult <- sqrt((r+1)*qf(alpha,r+1,n-r-1,lower.tail=FALSE))
V <- (t(e_hat)%*%e_hat/(n-r-1))%*%(solve(t(Z)%*%Z))
SE <- sqrt(diag(V))
cbind(Z01%*%beta_hat1 - f_mult*SE, Z01%*%beta_hat1 + f_mult*SE)
f_mult
SE
qf(alpha,r+1,n-r-1,lower.tail=FALSE)
f_mult
r <- 1; n <- 10; alpha<-0.05; Z01 <- c(1, 0.5)
f_mult <- sqrt((r+1)*qf(alpha,r+1,n-r-1,lower.tail=FALSE))
f_mult
V <- (t(e_hat)%*%e_hat/(n-r-1))%*%(solve(t(Z)%*%Z))
SE <- sqrt(diag(V))
cbind(Z01%*%beta_hat1 - f_mult*SE, Z01%*%beta_hat1 + f_mult*SE)
r <- 1; n <- 5; alpha<-0.05; Z01 <- c(1, 0.5)
t_mult <- qt(alpha/2,n-r-1,lower.tail=FALSE)
t_mult
V <- (t(e_hat)%*%e_hat/(n-r-1))%*%(solve(t(Z)%*%Z))
SE <- sqrt(diag(V))
cbind(Z01%*%beta_hat1 - t_mult*SE, Z01%*%beta_hat1 + t_mult*SE)
Z01%*%beta_hat1
t(e_hat)%*%e_hat
SE <- sqrt(Z01%*%(solve(t(Z)%*%Z))%*%t(Z01)*1.9/3)
SE <- sqrt((Z01%*%(solve(t(Z)%*%Z))%*%t(Z01)*1.9/3))
SE <- sqrt(Z01%*%(solve(t(Z)%*%Z))%*%t(Z01))
r <- 1; n <- 5; alpha<-0.05; Z01 <- c(1, 0.5)
t_mult <- qt(alpha/2,n-r-1,lower.tail=FALSE)
SE <- sqrt(Z01%*%(solve(t(Z)%*%Z))%*%t(Z01))
solve(t(Z)%*%Z)
Z01%*%solve(t(Z)%*%Z)
Z01%*%solve(t(Z)%*%Z)%*%t(Z01)
Z01
t(Z01)
Z01%*%solve(t(Z)%*%Z)%*%t(Z01)
t(Z01%)*%solve(t(Z)%*%Z)%*%Z01
Z01%*%solve(t(Z)%*%Z)%*%t(Z01)
Z01%*%solve(t(Z)%*%Z)
SE <- sqrt(Z01%*%(solve(t(Z)%*%Z))%*%t(Z01))
Z01%*%solve(t(Z)%*%Z)
Z01%*%solve(t(Z)%*%Z)%*%(t(Z01))
SE <- sqrt(Z01%*%(solve(t(Z)%*%Z))%*%(t(Z01)))
Z01%*%(solve(t(Z)%*%Z))%*%(t(Z01))
Z01%*%(solve(t(Z)%*%Z))%*%t(Z01)
Z01%*%solve(t(Z)%*%Z)%*%t(Z01)
SE <- sqrt(Z01%*%solve(t(Z)%*%Z)%*%t(Z01))
SE <- sqrt(Z01%*%solve(t(Z)%*%Z)%*%t(Z01)*1.9/3)
cbind(Z01%*%beta_hat1 - t_mult*SE, Z01%*%beta_hat1 + t_mult*SE)
r <- 1; n <- 5; alpha<-0.05; Z01 <- c(1, 0.5)
Z01%*%solve(t(Z)%*%Z)%*%t(Z01)
r <- 1; n <- 5; alpha<-0.05; Z01 <- c(1, 0.5)
t_mult <- qt(alpha/2,n-r-1,lower.tail=FALSE)
SE <- sqrt(Z01%*%solve(t(Z)%*%Z)%*%t(Z01)*1.9/3)
SE <- sqrt(Z01%*%solve(t(Z)%*%Z)%*%t(Z01))
Z01%*%solve(t(Z)%*%Z)%*%t(Z01)
Z01%*%solve(t(Z)%*%Z)%*%(t(Z01))
Z01%*%(solve(t(Z)%*%Z))%*%(t(Z01))
(Z01)%*%(solve(t(Z)%*%Z))%*%(t(Z01))
A <- solve(t(Z)%*%Z)
SE <- sqrt(Z01%*%A%*%t(Z01))
Z01%*%A%*%t(Z01)
t(Z01)%*%A%*%Z01
SE <- sqrt(t(Z01)%*%solve(t(Z)%*%Z)%*%Z01)
SE <- sqrt(t(Z01)%*%solve(t(Z)%*%Z)%*%Z01*1.9/3)
cbind(Z01%*%beta_hat1 - t_mult*SE, Z01%*%beta_hat1 + t_mult*SE)
SE1 <- sqrt(1 + t(Z01)%*%solve(t(Z)%*%Z)%*%Z01*1.9/3)
cbind(Z01%*%beta_hat1 - t_mult*SE1, Z01%*%beta_hat1 + t_mult*SE1)
SE1 <- sqrt((1 + t(Z01)%*%solve(t(Z)%*%Z)%*%Z01)*1.9/3)
cbind(Z01%*%beta_hat1 - t_mult*SE1, Z01%*%beta_hat1 + t_mult*SE1)
### Data preparation
ELIPs <- read.csv("/Users/yq/Dropbox/Projects/01 Multi-panel barplot/ELIPs.txt", sep = ",", header=TRUE, comm="#")
str(ELIPs) # check data structure
# get means for each ELIP gene
ELIPs.2 <- aggregate(ELIPs[,4:6], by=list(ELIPs$Month, ELIPs$Species), mean)
# get SE, only cols 3:5, and bind columnwise (cbind) to the means
ELIPs.2<-cbind(ELIPs.2, aggregate(ELIPs[,4:6],by=list(ELIPs$Month, ELIPs$Species) ,function(x)(sd(x,na.rm=TRUE)/((length(x)-sum(is.na(x)))^0.5)))[,3:5])
names(ELIPs.2) <- c("Month","Species","ELIP1","ELIP2","ELIP3", "ELIP1se","ELIP2se","ELIP3se") # # assign new names to variables
ELIPs.2$type <- letters[1:10] # create the trt type variable
head(ELIPs.2) # check
str(ELIPs) # check data structure
# get means for each ELIP gene
ELIPs.2 <- aggregate(ELIPs[,4:6], by=list(ELIPs$Month, ELIPs$Species), mean)
# get SE, only cols 3:5, and bind columnwise (cbind) to the means
ELIPs.2<-cbind(ELIPs.2, aggregate(ELIPs[,4:6],by=list(ELIPs$Month, ELIPs$Species),function(x)(sd(x,na.rm=TRUE)/((length(x)-sum(is.na(x)))^0.5)))[,3:5])
names(ELIPs.2) <- c("Month","Species","ELIP1","ELIP2","ELIP3", "ELIP1se","ELIP2se","ELIP3se") # # assign new names to variables
ELIPs.2$type <- letters[1:10] # create the trt type variable
head(ELIPs.2) # check
ELIPs.2<-cbind(ELIPs.2, aggregate(ELIPs[,4:6],by=list(ELIPs$Species, ELIPs$Month),function(x)(sd(x,na.rm=TRUE)/((length(x)-sum(is.na(x)))^0.5)))[,3:5])
names(ELIPs.2) <- c("Month","Species","ELIP1","ELIP2","ELIP3", "ELIP1se","ELIP2se","ELIP3se") # # assign new names to variables
ELIPs.2$type <- letters[1:10] # create the trt type variable
head(ELIPs.2) # check
?barplot
head(ELIPs.2) # check
names(ELIPs.2) <- c("Month","Species","ELIP1","ELIP2","ELIP3", "ELIP1se","ELIP2se","ELIP3se") # # assign new names to variables
head(ELIPs.2) # check
ELIPs <- read.csv("/Users/yq/Dropbox/Projects/01 Multi-panel barplot/ELIPs.txt", sep = ",", header=TRUE, comm="#")
str(ELIPs) # check data structure
# get means for each ELIP gene
ELIPs.2 <- aggregate(ELIPs[,4:6], by=list(ELIPs$Month, ELIPs$Species), mean)
# get SE, only cols 3:5, and bind columnwise (cbind) to the means
ELIPs.2<-cbind(ELIPs.2, aggregate(ELIPs[,4:6],by=list(ELIPs$Species, ELIPs$Month),function(x)(sd(x,na.rm=TRUE)/((length(x)-sum(is.na(x)))^0.5)))[,3:5])
names(ELIPs.2) <- c("Month","Species","ELIP1","ELIP2","ELIP3", "ELIP1se","ELIP2se","ELIP3se") # # assign new names to variables
head(ELIPs.2) # check
quartz(title="Seasonal ELIPs expressions in Rhododendrons",height=5,width=4) # open a new plotting window with defined size
layout(matrix(c(1,2,3),nrow=3),heights=c(1,1,1.3)) # Three figures in one plot
## plot for ELIP1
par(mar=c(0.6,5,1,1),cex.axis=1.3, cex.lab=1.3) # set margins and plot frame type - top and bottom margins small so plots close together
a <- with(ELIPs.2,barplot(ELIP1,col=c("grey80","grey30"),ylim=c(0,35),ylab="Relative expression",xlab="",xaxt="n"))
box(which="plot")
with(ELIPs.2,arrows(a, ELIP1+ELIP1se, a, ELIP1-ELIP1se, length = 0.05, angle = 90, code=3)) # err bars
divs<-c(mean(a[2:3]),mean(a[4:5]),mean(a[6:7]),mean(a[8:9])) # calculate divider locations
abline(v=divs,lty=2)
text(a,(ELIPs.2$ELIP1+ELIPs.2$ELIP1se),c("ef","f","e","b","a","e","d","d","c","b"),pos=3,cex=1.5) # add letters
a
a <- with(ELIPs.2,barplot(ELIP1,col=c("grey80","grey30"),ylim=c(0,35),ylab="Relative expression",xlab="",xaxt="n"))
head(ELIPs.2) # check
ELIPs.2 <- ELIPs.2[order(Month, Species)]
ELIPs.2 <- ELIPs.2[order(Species)]
ELIPs.2 <- ELIPs.2[order(Month,Species),]
head(ELIPs.2) # check
ELIPs.2 <- ELIPs.2[order(Month,Species),]
ELIPs.2 <- ELIPs.2[order(Month),]
ELIPs.2 <- ELIPs.2[order(ELIPs.2$Month),]
head(ELIPs.2) # check
ELIPs.2 <- ELIPs.2[order(ELIPs.2$Month, -ELIPs.2$Species),]
ELIPs.2 <- ELIPs.2[order(ELIPs.2$Month),]
head(ELIPs.2) # check
?legend
head(ELIPs.2)[1:4,] # check
ELIPs.2 <- aggregate(ELIPs[,4:6], by=list(ELIPs$Month, ELIPs$Species), mean, digits=2)
# get SE, only cols 3:5, and bind columnwise (cbind) to the means
ELIPs.2<-cbind(ELIPs.2, aggregate(ELIPs[,4:6],by=list(ELIPs$Species, ELIPs$Month),function(x)(sd(x,na.rm=TRUE)/((length(x)-sum(is.na(x)))^0.5)))[,3:5])
names(ELIPs.2) <- c("Month","Species","ELIP1","ELIP2","ELIP3", "ELIP1se","ELIP2se","ELIP3se") # # assign new names to variables
# sort ELIPs.2 by Month
ELIPs.2 <- ELIPs.2[order(ELIPs.2$Month),]
head(ELIPs.2)[1:4,] # check
setwd("~/Dropbox")
?read.xlsx
??read.xlsx
a=c(1:10)
a
1:10
data <- read.xlsx("/Users/yq/Dropbox/data.xlsx", sheetIndex=c(1:10), sheetName=c("Set1Day1","Set1Day2", "Set1Day3","Set1Day4","Set1Day5","Set2Day1","Set2Day2","Set2Day3","Set2Day4","Set2Day5"), header=TRUE)
library(xlsx)
data <- read.xlsx("/Users/yq/Dropbox/data.xlsx", sheetIndex=c(1:10), sheetName=c("Set1Day1","Set1Day2", "Set1Day3","Set1Day4","Set1Day5","Set2Day1","Set2Day2","Set2Day3","Set2Day4","Set2Day5"), header=TRUE)
data1 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 1, sheetName="Set1Day1", header=TRUE)
data1[1:3,]
dim(data1)
data1 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 1, sheetName="Set1Day1", header=TRUE)
data2 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 2, sheetName="Set1Day2", header=TRUE)
data3 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 3, sheetName="Set1Day3", header=TRUE)
data4 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 4, sheetName="Set1Day4", header=TRUE)
data5 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 5, sheetName="Set1Day5", header=TRUE)
data6 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 6, sheetName="Set2Day1", header=TRUE)
data7 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 7, sheetName="Set2Day2", header=TRUE)
data8 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 8, sheetName="Set2Day3", header=TRUE)
data9 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 9, sheetName="Set2Day4", header=TRUE)
data10 <- read.xlsx("/Users/yq/Dropbox/data.xlsx", 10, sheetName="Set2Day5", header=TRUE)
dim(data2)
dim(data3)
dim(data4)
dim(data5)
dim(data6)
dim(data7)
dim(data8)
dim(data9)
dim(data10)
data <- rbind(data1,data2,data3,data5,data6,data7,data8,data9,data10)
str(data1)
type <- rbind(data1[,8],data2[,8],data3[,8],data4[,8],data5[,8],data6[,8],data7[,8],data8[,8],data9[,8],data10[,8])
type <- rbind(data1[,8],data2[,8],data3[,8],data4[,8])
??read.xlsx
library(xlsx); library(dplyr)
data1 <- select(data1, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
str(data1)
data2 <- select(data2, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data3 <- select(data3, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data4 <- select(data4, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data5 <- select(data5, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data6 <- select(data6, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data7 <- select(data7, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data8 <- select(data8, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data9 <- select(data9, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
data10 <- select(data10, Samp.Desc,Age,Temperature,Appearance,Color,Taste,Texture,Overall.Liking)
str(data10)
data <- rbind(data1,data2,data3,data5,data6,data7,data8,data9,data10)
str(data)
head(data)
is.na(data)
which(is.na(data))
which(is.na(data)==T)
is.na(data)==T
data$Age <- as.factor(data$Age)
str(data)
rename(data, Samp.Desc=Type)
rename(data, Samp.Desc="Type")
rename(data, "Samp.Desc"="Type")
??rename
names(data)[1]<-"Type"
str(data)
str(data) # check the data
names(data)[1]<-"Type"; names(data)[8]<-"Liking" # rename Samp.Desc to Type
str(data) # check the data
histograms(data, col = “green”)
histograms(data, col="green")
library(xlsx); library(dplyr); library(ggplot2)
histograms(data, col="green")
library(ggplot2)
histograms(data, col="green")
hist(data, col="green")
hist(data=data, Temperature,Appearance,Color,Taste,Texture,Liking, col="green")
hist(data$Temperature,data$Appearance,data$Color,data$Taste,data$Texture,data$Liking, col="green")
histograms(data$Temperature,data$Appearance,data$Color,data$Taste,data$Texture,data$Liking, col="green")
hist(data$Temperature, col="green")
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))
hist(data$Temperature, col="green"); hist(data$Appearance, col="green")
hist(data$Color, col="green"); hist(data$Taste, col="green")
hist(data$Texture, col="green"); hist(data$Liking, col="green")
head[data]
data <- rbind(data1,data2,data3,data5,data6,data7,data8,data9,data10)
data$Age <- as.factor(data$Age) # change Age from numeric to factor
names(data)[1]<-"Type"; names(data)[8]<-"Liking" # rename Samp.Desc to Type
str(data) # check the data
head(data)
data$Temperature[data$Temperature==6] <- 1
head(data)
data <- rbind(data1,data2,data3,data5,data6,data7,data8,data9,data10)
data$Age <- as.factor(data$Age) # change Age from numeric to factor
names(data)[1]<-"Type"; names(data)[8]<-"Liking" # rename Samp.Desc to Type
str(data) # check the data
head(data)
data$Temperature[data$Temperature==6] <- 4
head(data)
data <- rbind(data1,data2,data3,data5,data6,data7,data8,data9,data10)
data$Age <- as.factor(data$Age) # change Age from numeric to factor
names(data)[1]<-"Type"; names(data)[8]<-"Liking" # rename Samp.Desc to Type
str(data) # check the data
# assign new values to Temperature so that the higher the number, the more likeness;
head(data)
data$Temperature[data$Temperature==9] <- 1; data$Temperature[data$Temperature==8] <- 2;
data$Temperature[data$Temperature==7] <- 3; data$Temperature[data$Temperature==6] <- 4;
head(data)
data$Color[data$Color==9] <- 1; data$Color[data$Color==8] <- 2;
data$Color[data$Color==7] <- 3; data$Color[data$Color==6] <- 4;
head(data)
par(mfrow = c(2, 3), mar = c(4, 4, 2, 1))
hist(data$Temperature, col="green"); hist(data$Appearance, col="green")
hist(data$Color, col="green"); hist(data$Taste, col="green")
hist(data$Texture, col="green"); hist(data$Liking, col="green")
hist(log(data$Temperature), col="green")
hist(sqrt(data$Temperature), col="green")
hist(data$Temperature -5, col="green")
hist(data$Temperature -10, col="green")
hist(data$Color, col="green")
hist(log10(data$Temperature), col="green")
hist(data$Temperature, col="green"); hist(data$Appearance, col="green")
hist(data$Color, col="green"); hist(data$Taste, col="green")
hist(log10(data$Temperature), col="green")
hist(data$Color, col="green")
hist(data$Texture, col="green"); hist(data$Liking, col="green")
data$Color[1:10]
data$Color[1:30]
?anova
anova(lm(Liking ~ Type*Age, data)
a
a <- anova(lm(Liking ~ Type*Age, data)
fit <- aov(Liking ~ Type*Age, data)
fit <- aov(Liking ~ Type*Age, data)
summary(fit)
fit <- aov(Liking ~ Type + Age, data); summary(fit)
?pairwise.t.test
pairwise.t.test(data$Liking, data$Age, p.adj = “none”)
pairwise.t.test(data$Liking, data$Age, p.adj = "none")
fit <- aov(Liking ~ Type + Age, data); summary(fit)
pairwise.t.test(data$Liking, data$Age, data$Type, p.adj = "none")
fit <- aov(Liking ~ Type + Age, data); summary(fit)
layout(matrix(c(1,2,3,4),2,2))
plot(fit) # diagnostic plots
layout(matrix(c(1,2,3,4),2,2)); plot(fit) # diagnostic plots
TukeyHSD(fit) # where fit comes from aov()
plotmeans(data$Liking ~ data$Type + data$Age)
library(gplots)
install.packages("gplots")
install.packages("gplots")
library(gplots)
plotmeans(data$Liking ~ data$Type + data$Age)
plotmeans(data$Liking ~ data$Age)
boxplot(Liking ~ Type + Age, data, col = “red”)
boxplot(Liking ~ Type + Age, data, col ="green")
d <- ggplot(data=data, aes(x=Type, y=Liking))
d <- d + geom_bar(fill="green", color="green",stat = "identity") +
guides(fill=F) +
ggtitle('Overall Likings in Different Type and Age of Oils') +
ylab('Liking') +
xlab('Type') +
theme(legend.position='none') +
facet_grid(. ~ Age) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(d)
?boxplot
boxplot(Liking ~ Type, data=data)
TukeyHSD(fit) # where fit comes from aov()
boxplot(Liking ~ Type, data=data)
boxplot(Liking ~ Age, data=data)
boxplot(Liking ~ Type*Age, data=data)
boxplot(Liking ~ Type by Age, data=data)
boxplot(Liking ~ Type + Age, data=data)
boxplot(Liking ~ Type + Age, data=data)
print(d)
data.1 <- aggregate(data[,3:8], by=list(data$Type, data$Age), mean)
str(data.1)
d <- ggplot(data=data.1, aes(x=Group.1, y=Liking))
d <- d + geom_bar(fill="green", color="green",stat = "identity") +
guides(fill=F) +
ggtitle('Overall Likings in Different Type and Age of Oils') +
ylab('Liking') +
xlab('Type') +
theme(legend.position='none') +
facet_grid(. ~ Group.2) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(d)
d <- ggplot(data=data.1, aes(x=Group.2, y=Liking))
d <- d + geom_bar(fill="green", color="green",stat = "identity") +
guides(fill=F) +
ggtitle('Overall Likings in Different Type and Age of Oils') +
ylab('Liking') +
xlab('Type') +
theme(legend.position='none') +
facet_grid(. ~ Group.1) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(d)
d <- ggplot(data=data.1, aes(x=Group.2, y=Liking))
d <- d + geom_bar(fill="grey", color="grey",stat = "identity") +
guides(fill=F) +
ggtitle('Mean of Overall Likings in Different Type and Age of Oils') +
ylab('Liking') +
xlab('Age') +
theme(legend.position='none') +
facet_grid(. ~ Group.1) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(d)
fit <- aov(Liking ~ Type + Age, data); summary(fit)
TukeyHSD(fit) # where fit comes from aov()
boxplot(Liking ~ Type, data=data) #
boxplot(Liking ~ Age, data=data)
boxplot(Liking ~ Type + Age, data=data)
print(d)
par(mfrow=c(2,2), mar=c(4, 4, 2, 1))
hist(data$Appearance, col="green"); hist(data$Color, col="green")
hist(data$Texture, col="green"); hist(data$Liking, col="green")
par(mfrow=c(2,2), mar=c(4, 4, 2, 1))
hist(data$Appearance, col="green"); hist(data$Taste, col="green")
hist(data$Texture, col="green"); hist(data$Liking, col="green")
data$Temperature
length(data$Temperature==5)
length(data$Temperature==4)
length(data$Temperature[data$Temperature==4])
length(data$Temperature[data$Temperature==5])
length(data$Temperature[data$Temperature==3])
length(data$Temperature[data$Temperature==2])
length(data$Temperature[data$Temperature==1])
qplot(Liking, Age, data = data, facets = . ~ Type)
qplot(Age, Liking, data = data, facets = . ~ Type)
str(data.1)
qplot(Group.2, Liking, data = data.1, facets = . ~ Group.1)
print(d)
qplot(Group.2, Liking, data = data.1, facets = . ~ Group.1)
?line
pairs(~Appearance,Color,Taste,Texture,Liking,data=data, main="Simple Scatterplot Matrix")
str(data)
pairs(~Appearance,Color,Taste,Texture,Liking,data=data, main="Simple Scatterplot Matrix")
pairs(~Temperature,Appearance,Color,Taste,Texture,Liking,data=data, main="Simple Scatterplot Matrix")
pairs(~Temperature+Appearance+Color+Taste+Texture+Liking,data=data, main="Simple Scatterplot Matrix")
pairs(~Temperature+Appearance+Color+Taste+Texture+Liking,data, main="Simple Scatterplot Matrix")
hist(data$Temperature, col="green")
hist(data$Color, col="green")
pairs(~Temperature+Appearance+Color+Taste+Texture+Liking,data, main="Simple Scatterplot Matrix")
data.2 <- data[, 3:8]
str(data.2)
OLS <- lm(Liking~., data.2); summary(OLS)
par(mfrow=c(2,2)); plot(OLS)
BIC <- regsubsets(Liking~., data.2, nvmax=5)
library(leaps)
BIC <- regsubsets(Liking~., data.2, nvmax=5)
summary(BIC)
which.min(summary(BIC)$bic) # determine the number of variables with the lowest BIC value
coef(BIC, id=5)
library(MASS)
fit <- lm(Liking~., data.2)
step <- stepAIC(fit, direction="both")
step$anova # display results
fit.Appearance <- aov(Appearance ~ Type*Age, data); summary(fit)
fit.Appearance <- aov(Appearance ~ Type*Age, data); summary(fit.Appearance)
fit.Appearance <- aov(Appearance ~ Type + Age, data); summary(fit.Appearance)
layout(matrix(c(1,2,3,4),2,2)); plot(fit.Appearance) # diagnostic plots
TukeyHSD(fit.Appearance) # fit comes from aov()
boxplot(Appearance ~ Type, data) # again we don't see much difference among different types of oil
boxplot(Appearance ~ Age, data) # apparently we can see Age 5 is significantly higher than other ages
e <- ggplot(data=data.1, aes(x=Group.2, y=Appearance))
e <- e + geom_bar(fill="grey", color="grey",stat = "identity") +
guides(fill=F) +
ggtitle('Mean of Appearance in Different Types and Ages of Oils') +
ylab('Appearance') +
xlab('Age') +
theme(legend.position='none') +
facet_grid(. ~ Group.1) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(e)
boxplot(Appearance ~ Type, data) # again we don't see much difference among different types of oil
str(data)
fit.Taste <- aov(Taste ~ Type*Age, data); summary(fit.Taste)
fit.Taste <- aov(Taste ~ Type + Age, data); summary(fit.Taste)
layout(matrix(c(1,2,3,4),2,2)); plot(fit.Taste) # diagnostic plots
TukeyHSD(fit.Taste) # fit comes from aov()
boxplot(Taste ~ Type, data) # again we don't see much difference among different types of oil
boxplot(Taste ~ Age, data) # apparently we can see Age 5 is significantly higher than other ages
f <- ggplot(data=data.1, aes(x=Group.2, y=Taste))
f <- f + geom_bar(fill="grey", color="grey",stat = "identity") +
guides(fill=F) +
ggtitle('Mean of Taste in Different Types and Ages of Oils') +
ylab('Taste') +
xlab('Age') +
theme(legend.position='none') +
facet_grid(. ~ Group.1) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(f)
str(data)
boxplot(Texture ~ Age, data) # apparently we can see Age 5 is significantly higher than other ages
g <- ggplot(data=data.1, aes(x=Group.2, y=Texture))
g <- g + geom_bar(fill="grey", color="grey",stat = "identity") +
guides(fill=F) +
ggtitle('Mean of Texture in Different Types and Ages of Oils') +
ylab('Texture') +
xlab('Age') +
theme(legend.position='none') +
facet_grid(. ~ Group.1) +
geom_text(aes(label=round(Liking, 0), size=1, hjust=0.5, vjust=-1))
print(g)
setwd("~/GitHub/Final project")
